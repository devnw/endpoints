package endpoints

import (
	"fmt"
	"github.com/gorilla/mux"
	"net/http"
	"github.com/nortonlifelock/domain"
)

func getVulnerabilitiesBySource(w http.ResponseWriter, r *http.Request) {
	executeTransaction(w, r, getVulnBySourceEndpoint, allAllowed, func(trans *transaction) {
		params := mux.Vars(r)
		var source = params[sourceParam]

		if len(source) > 0 {
			var vulnerabilities []domain.VulnerabilityInfo
			vulnerabilities, trans.err = Ms.GetVulnInfoBySource(source)
			if trans.err == nil {
				trans.obj = toVulnDtoSlice(vulnerabilities)
				trans.status = http.StatusOK
			} else {
				(&trans.wrapper).addError(fmt.Errorf("error while loading vulnerabilities from database - %s", trans.err.Error()), databaseError)
			}
		} else {
			(&trans.wrapper).addError(fmt.Errorf("empty source passed to getVulnerabilitiesBySource"), requestFormatError)
		}

	})
}

func getMatchedVulns(w http.ResponseWriter, r *http.Request) {
	executeTransaction(w, r, getMatchedVulnsEndpoint, allAllowed, func(trans *transaction) {
		var vulnMatches []domain.VulnerabilityMatch
		vulnMatches, trans.err = Ms.GetMatchedVulns()
		if trans.err == nil {
			trans.obj = toVulnMatchDtoSlice(vulnMatches)
			trans.status = http.StatusOK
		} else {
			(&trans.wrapper).addError(trans.err, requestFormatError)
		}
	})
}
